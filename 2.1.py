"""
2. Задача полягає у вивченні і реалізації алгоритмів пошуку для даних, підготовлених
за допомогою функції моделювання випадкових чисел і текстів, підготовлених
самостійно.
1) лінійний пошук;
Barbak Vladuslav 122V
"""
import numpy as np  # Імпортуємо бібліотеку NumPy
import random  # Імпортуємо бібліотеку Random
mas1=np.array(range(1,15))  # Створюємо масив, для перевірки правильності нашого пошуку.
print(mas1)  # Виводемо створений масив
x=int(input('Enter the item we are looking for'))  # Якщо користувач ввдед більше 14, то пошук не буде здійснено
l=len(mas1)  # Знаходимо довжину масиву
count=0  # Введемо лічильник для підрахунку кількості ітерацій
while count<l and mas1[count]!=x:  # Вводемо лінійний пошук
    count+=1 # При кожній ітерації лічильник добавляє 1
print('Number of comparisons',count)  # Кількість порівнянь, починається з 0 в крок 1, необхідно x-1 кроків
if count==l:  # Якщо лічильник дорівнює 1, то елемента немає
    print('No item')
else:  # Інакше елемент найдений на позиції count
    print(f'In position {count} found {x}')
"""
Робота з рандомними значеннями
"""
mas2=np.zeros(20,dtype=int)  # Створюємо масив із 20 ел типу інт ініцалізуваавши їх нулями для перевірки правильності нашого пошуку.
for i in range(20): # Перебираєм кожний елемент ряду
    mas2[i]=random.randint(-10,10)  # Кожному елементу присвоюєм випадкове значення в діапазоні від(-10,10)
print(mas2)  # Виводемо створений масив
l1=len(mas2)  # Знаходимо довжину масиву
count2=0  # Введемо лічильник для підрахунку кількості ітерацій
while count2<l and mas2[count2]!=x:  # Вводимо лінійний пошук
    count2+=1 # При кожній ітерації лічильник добавляє 1
print('Number of comparisons',count2)  # Кількість порівнянь
if count2==l1:  # Якщо лічильник дорівнює 1, то елемента немає
    print('No item')
else:  # Інакше елемент найдений на позиції count
    print(f'In position {count2} found {x}')